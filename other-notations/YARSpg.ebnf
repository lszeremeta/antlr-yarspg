/*
 YARS-PG grammar in Extended Backus-Naur Form (EBNF) notation
 Based on YARS-PG grammar in ANTLR4
 
 See more at:
 https://github.com/lszeremeta/antlr-yarspg
 
 [The "BSD licence"]
 Copyright (c) 2018-2019, ≈Åukasz Szeremeta (@ University of Bialystok, http://www.uwb.edu.pl/)
 Copyright (c) 2018-2019, Dominik Tomaszuk (@ University of Bialystok, http://www.uwb.edu.pl/)
 All rights reserved.

 Based on YARS grammar
 (https://github.com/lszeremeta/antlr-yars/blob/master/yars/YARS.g4)
 distributed under BSD licence.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
*/

yarspg   ::= ( statement NL+ )+
statement
         ::= declaration
declaration
         ::= nodeDeclaration
           | relationship
nodeDeclaration
         ::= '<' node_id '>' ( '{' node_label ( ',' node_label )+ '}' )? ( '[' node_prop ( ',' node_prop )+ ']' )?
relationship
         ::= directed
           | undirected
directed ::= '(' node_id ')' '-' ('<' rel_id '>')? '{' rel_label '}' ( '[' rel_prop ( ',' rel_prop )+ ']' )? '->' '(' node_id ')'
undirected
         ::= '(' node_id ')' '-' ('<' rel_id '>')? '{' rel_label '}' ( '[' rel_prop ( ',' rel_prop )+ ']' )? '-' '(' node_id ')'
node_id  ::= STRING
node_label
         ::= STRING
node_prop
         ::= key ':' value         
rel_id   ::= STRING
rel_label
         ::= STRING
rel_prop
         ::= key ':' value 
key      ::= STRING
value    ::= single_key_value
           | multiple_key_values
single_key_value
         ::= STRING
           | NUMBER
           | 'null'
           | TRUE_FALSE
multiple_key_values
         ::= '[' single_key_value ( ',' single_key_value )+ ']'
_        ::= SP
          /* ws: definition */

<?TOKENS?>

STRING   ::= STRING_LITERAL_QUOTE
NUMBER   ::= [0-9]+ '.'? [0-9]*
TRUE_FALSE
         ::= 'true' | 'false'
STRING_LITERAL_QUOTE
         ::= '"' ( [^#x0022#x005C#x000A#x000D] | "'" | '\"' )* '"'  /* #x0022=" #x005C=\ #x000A=new line #x000D=carriage return */
SP       ::= [#x0020#x0009]+    /* #x0020=space #x0009=character tabulation */
NL       ::= #x000D #x000A      /* #x000D=carriage return #x000A=new line */
