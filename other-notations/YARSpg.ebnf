/*
 YARS-PG grammar in Extended Backus-Naur Form (EBNF) notation
 Based on YARS-PG grammar in ANTLR4
 
 See more at:
 https://github.com/lszeremeta/antlr-yarspg
 
 [The "BSD licence"]
 Copyright (c) 2018-2019, ≈Åukasz Szeremeta (@ University of Bialystok, http://www.uwb.edu.pl/)
 Copyright (c) 2018-2019, Dominik Tomaszuk (@ University of Bialystok, http://www.uwb.edu.pl/)
 All rights reserved.

 Based on YARS grammar
 (https://github.com/lszeremeta/antlr-yars/blob/master/yars/YARS.g4)
 distributed under BSD licence.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
*/

yarspg   ::= statement+ EOF
statement
         ::= node
           | edge
           | prefix_directive
           | metadata
           | node_schema
           | edge_schema
           | section
prefix_directive
         ::= pname IRI
pname    ::= ':' ALNUM_PLUS ':'
pn_local ::= ALNUM_PLUS
metadata ::= '-' ( pn_local pname STRING | IRI ':' ( STRING | IRI ) )
annotation
         ::= string_annotation
           | rdf_annotation
string_annotation
         ::= STRING ':' STRING
rdf_annotation
         ::= ( pn_local pname | IRI ':' ) ( STRING | IRI )
annotations_list
         ::= '+' annotation ( ',' annotation )+
props_list
         ::= '[' prop ( ',' prop )+ ']'
graphs_list
         ::= '/' graph_name ( ',' graph_name )+ '/'
node
         ::= '<' node_id '>' ( '{' node_label ( ',' node_label )+ '}' )? props_list? graphs_list? annotations_list?
edge
         ::= directed
           | undirected
section  ::= '%' SECTION_NAME           
directed ::= '(' node_id ')' '-' ('<' edge_id '>')? '{' edge_label '}' props_list? '->' '(' node_id ')' graphs_list? annotations_list?
undirected
         ::= '(' node_id ')' '-' ('<' edge_id '>')? '{' edge_label '}' props_list? '-' '(' node_id ')' graphs_list? annotations_list?
node_id  ::= STRING
node_label
         ::= STRING
prop
         ::= key ':' value         
edge_id   ::= STRING
edge_label
         ::= STRING
key      ::= STRING
value    ::= primitive_value
           | complex_value
primitive_value
         ::= STRING
           | NUMBER
           | 'null'
           | BOOL
complex_value
         ::= set
           | list
           | struct
set ::= '{' ( primitive_value | set ) ( ',' ( primitive_value | set ) )* '}'
list     ::= '[' ( primitive_value | list ) ( ',' ( primitive_value | list ) )* ']'
struct     ::= '{' key ':' ( primitive_value | struct ) ( ',' key ':' ( primitive_value | struct ) )* '}'
node_schema
         ::= 'S' ( '{' node_label ( ',' node_label )+ '}' )? props_list_schema? graphs_list? annotations_list?
props_list_schema
         ::= '[' prop_schema ( ',' prop_schema )+ ']'
prop_schema
         ::= key ':' value_schema
value_schema
         ::= primitive_value_schema
           | complex_value_schema
primitive_value_schema
         ::= 'String'
           | 'Number'
           | 'Null'
           | 'Bool'
complex_value_schema
         ::= set_schema
           | list_schema
           | struct_schema
set_schema
         ::= 'Set' '(' ( primitive_value_schema | set_schema ) ')'
list_schema
         ::= 'List' '(' ( primitive_value_schema | list_schema ) ')'
struct_schema
         ::= 'Struct' '(' ( primitive_value_schema | struct_schema ) ')'
edge_schema
         ::= directed_schema
           | undirected_schema
directed_schema
         ::= 'S' ( '(' node_label ')' )? '-' '{' edge_label '}' props_list_schema? '->' ( '(' node_label ')' )?
undirected_schema
         ::= 'S' ( '(' node_label ')' )? '-' '{' edge_label '}' props_list_schema? '-' ( '(' node_label ')' )?
_        ::= COMMENT
           | WS
          /* ws: definition */

<?TOKENS?>

SECTION_NAME
         ::= 'PREFIXES'
           | 'METADATAS'
           | 'NODE SCHEMAS'
           | 'EDGE SCHEMAS'
           | 'NODES'
           | 'EDGES'
COMMENT  ::= '#' [^#xd#xa#xc]*
STRING   ::= STRING_LITERAL_QUOTE
NUMBER   ::= [0-9]+ '.'? [0-9]*
BOOL     ::= 'true'
           | 'false'
STRING_LITERAL_QUOTE
         ::= '"' ( [^"\#xd#xa] | "'" | '\"' )* '"'
ALNUM_PLUS
         ::= PN_CHARS_BASE ( ( PN_CHARS | '.' )* PN_CHARS )?
IRI  ::= '<' ( PN_CHARS | '.' | ':' | '/' | '\' | '#' | '@' | '%' | '&' | UCHAR )* '>'
PN_CHARS ::= PN_CHARS_U
           | [-0-9#xB7#x0300-#x036F#x203F-#x2040]
PN_CHARS_U
         ::= PN_CHARS_BASE
           | '_'
UCHAR    ::= ( '\u' | '\U' HEX HEX HEX HEX ) HEX HEX HEX HEX
PN_CHARS_BASE
         ::= [A-Za-z0-9#xC0-#xD6#xD8-#xF6#xF8-#x2FF#x370-#x37D#x37F-#x1FFF#x200C-#x200D#x2070-#x218F#x2C00-#x2FEF#x3001-#xD7FF#xF900-#xFDCF#xFDF0-#xFFFD]
HEX      ::= [0-9A-Fa-f]
WS       ::= [ #x9#xa#xd]+
EOF      ::= $